name: Build and Publish
on:
  workflow_dispatch:
  push:
    branches:
      - "master"
    tags:
      - v**

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
    outputs:
      version: ${{ steps.build.outputs.buildVersion }}
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4
      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs--${{ matrix.targetPlatform }}-${{ hashFiles('.lfs-assets-id') }}
      - name: Setup External Git LFS Credentials
        uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: ${{secrets.LFS_CREDENTIAL}}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Download Icon
        run: |
          curl -o Icon.zip "${{ secrets.ICON_URL }}"
          unzip Icon.zip -d Assets/Sprites
          rm Icon.zip
      # Cache
      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        id: build
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: AdInfinitum
          targetPlatform: ${{ matrix.targetPlatform }}
          allowDirtyBuild: true
      # Output
      - name: Upload to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: AdInfinitum-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
  # release:
  #   if: github.event_name == 'push'
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     # Checkout (without LFS)
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Download Artifacts
  #       uses: actions/download-artifact@v3
  #       with:
  #         path: build
  #     - name: Expose git commit data
  #       uses: rlespinasse/git-commit-data-action@v1
  #     - name: Build Changelog
  #       id: github_release
  #       uses: mikepenz/release-changelog-builder-action@v3
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Create Release
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         files: |
  #           build/AdInfinitum-StandaloneWindows64/*
  #           build/AdInfinitum-StandaloneLinux64/*
  #         name: env.GIT_COMMIT_MESSAGE_SUBJECT
  #         body: ${{steps.github_release.outputs.changelog}}
  publish:
    if: github.event_name == 'push'
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
        include:
          - targetPlatform: StandaloneWindows64
            channel: windows
          - targetPlatform: StandaloneLinux64
            channel: linux
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: build
      - name: Deploy Win64 to itch.io
        uses: manleydev/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          CHANNEL: ${{ matrix.channel }}
          ITCH_GAME: ad-infinitum
          ITCH_USER: mmgfrcs
          PACKAGE: build/AdInfinitum-${{ matrix.targetPlatform }}
          VERSION: ${{ needs.build.outputs.version }}

            